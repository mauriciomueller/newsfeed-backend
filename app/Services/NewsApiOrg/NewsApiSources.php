<?php
namespace App\Services\NewsApiOrg;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\GuzzleException;
use PHPUnit\Runner\Exception;
use Psr\Http\Message\ResponseInterface;

class NewsApiSources extends NewsApi
{
    public NewsApiPayload $payload;

    public function isResponseStructureOk(ResponseInterface $response): bool
    {
        // TODO: Implement isResponseStructureOk() method.
    }

    public function isPayloadAllowed(): void
    {
        parent::isPayloadAllowed(); // TODO: Change the autogenerated stub
    }

    public function getSources($category=null, $language=null, $country=null): array
    {
        //Get News Sources

        //Add category if provided
        if (!is_null($category)) {
            if (Helpers::isCategoryValid($category)) { $payload['category'] = $category; }
            else { throw new NewsApiException("Invalid Category Identifier Provided"); }
        }

        //Add Language if provided
        if (!is_null($language)) {
            if (Helpers::isLanguageValid($language)) { $payload['language'] = $language; }
            else {throw new NewsApiException("Invalid Language Identifier Provided "); }
        }

        //Add country if provided
        if (!is_null($country)) {
            if (Helpers::isCountryValid($country)) { $payload['country'] = $country; }
            else { throw new NewsApiException("Invalid Country Identifier Provided"); }
        }

        //Make Request
        $url = Helpers::sourcesUrl();
        try {
            $response = $this->client->request('GET', $url, ['headers'=>$this->request_header, 'query'=>$payload]);
            if($response->getStatusCode() == 200){
                return json_decode($response->getBody()->__toString());
            }
            else{
                $response_body = json_encode($response->getBody());
                throw new NewsApiException($response_body->message);
            }
        }
        catch (Exception $e) {
            throw new NewsApiException($e->getMessage());
        }
    }
}
